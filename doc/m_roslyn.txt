*m_roslyn.txt*	Modular enhancements for roslyn.nvim	*m_roslyn*

Author: ML (Mel) <https://github.com/augmentcode>
License: Same as Neovim

==============================================================================
CONTENTS						*m_roslyn-contents*

1. Introduction					|m_roslyn-introduction|
2. Setup					|m_roslyn-setup|
3. Configuration				|m_roslyn-configuration|
4. Commands					|m_roslyn-commands|
5. Functions					|m_roslyn-functions|
6. Auto Insert Docs				|m_roslyn-auto-insert-docs|
7. Health Check					|m_roslyn-health|
8. Troubleshooting				|m_roslyn-troubleshooting|

==============================================================================
1. INTRODUCTION					*m_roslyn-introduction*

M_Roslyn provides modular enhancements for roslyn.nvim following the 
established m_augment pattern for extensible LSP enhancements.

Features:
• C# documentation auto-insert with LSP integration
• Smart post-processing for clean output formatting
• Self-cleaning autocmds to avoid background overhead
• Comprehensive health checks and testing

Requirements:
• Neovim 0.10+ (for vim.snippet support)
• roslyn.nvim plugin
• .NET SDK
• C# filetype detection

==============================================================================
2. SETUP						*m_roslyn-setup*

M_Roslyn is automatically loaded when roslyn.nvim is configured. Add to your
roslyn plugin configuration:

>lua
	require('m_roslyn').setup({
	  auto_insert_docs = {
	    enabled = true,
	    debug = false,
	  }
	})
<

==============================================================================
3. CONFIGURATION				*m_roslyn-configuration*

						*m_roslyn-config*
Configuration options for m_roslyn enhancements.

>lua
	require('m_roslyn').setup({
	  auto_insert_docs = {
	    enabled = true,        -- Enable documentation auto-insert
	    debug = false,         -- Enable debug notifications
	    trigger_pattern = "///", -- Pattern to trigger auto-insert
	  }
	})
<

Options:					*m_roslyn-options*

auto_insert_docs.enabled			*m_roslyn-auto-insert-docs-enabled*
	Type: boolean
	Default: true
	Enable or disable C# documentation auto-insert functionality.

auto_insert_docs.debug				*m_roslyn-auto-insert-docs-debug*
	Type: boolean
	Default: false
	Enable debug notifications to troubleshoot auto-insert behavior.

auto_insert_docs.trigger_pattern		*m_roslyn-auto-insert-docs-trigger*
	Type: string
	Default: "///"
	Pattern that triggers documentation auto-insert.

==============================================================================
4. COMMANDS						*m_roslyn-commands*

						*:MRoslynEnable*
:MRoslynEnable		Enable C# documentation auto-insert functionality.

						*:MRoslynDisable*
:MRoslynDisable		Disable C# documentation auto-insert functionality.

						*:MRoslynToggle*
:MRoslynToggle		Toggle C# documentation auto-insert functionality.

						*:MRoslynStatus*
:MRoslynStatus		Show current status of m_roslyn enhancements.

						*:MRoslynDebug*
:MRoslynDebug		Toggle debug mode for m_roslyn enhancements.

==============================================================================
5. FUNCTIONS					*m_roslyn-functions*

						*m_roslyn.setup()*
m_roslyn.setup({opts})
	Setup m_roslyn with configuration options.
	
	Parameters: ~
		{opts} (table) Configuration options. See |m_roslyn-config|

						*m_roslyn.auto_insert_docs.enable()*
m_roslyn.auto_insert_docs.enable()
	Enable C# documentation auto-insert functionality.

						*m_roslyn.auto_insert_docs.disable()*
m_roslyn.auto_insert_docs.disable()
	Disable C# documentation auto-insert functionality.

						*m_roslyn.auto_insert_docs.toggle()*
m_roslyn.auto_insert_docs.toggle()
	Toggle C# documentation auto-insert functionality.

						*m_roslyn.auto_insert_docs.get_config()*
m_roslyn.auto_insert_docs.get_config()
	Get current configuration for auto-insert functionality.
	
	Returns: ~
		(table) Current configuration options

==============================================================================
6. AUTO INSERT DOCS				*m_roslyn-auto-insert-docs*

The auto-insert documentation feature automatically expands `///` to XML
documentation templates using LSP integration with post-processing cleanup.

Usage:					*m_roslyn-auto-insert-usage*

Type `///` above a C# method, class, or property to automatically generate:

>csharp
	/// <summary>
	/// 
	/// </summary>
	/// <param name="paramName">Description</param>
	/// <returns>Description</returns>
<

Implementation:				*m_roslyn-auto-insert-implementation*

The feature uses a hybrid approach due to LSP method limitations:

1. Primary Handler: Attempts `textDocument/_vs_onAutoInsert` LSP request
2. Secondary Handler: Built-in roslyn handler provides functionality  
3. Post-Processor: Detects and cleans malformed output, then self-removes

Technical Details:			*m_roslyn-auto-insert-technical*

• Trigger Pattern: Detects third consecutive `/` character
• LSP Integration: Uses vim.lsp.buf_request with VS-specific parameters
• Post-Processing: TextChangedI autocmd cleans malformed output
• Self-Cleaning: Autocmd removes itself after processing to avoid overhead
• Parameter Detection: Automatically extracts method parameters
• Return Detection: Excludes `<returns>` for void methods

==============================================================================
7. HEALTH CHECK					*m_roslyn-health*

Run health check to verify m_roslyn configuration:

>vim
	:checkhealth m_roslyn
<

The health check verifies:
• roslyn.nvim plugin availability
• Active roslyn LSP clients  
• vim.snippet support
• .NET environment
• Current buffer context

==============================================================================
8. TROUBLESHOOTING				*m_roslyn-troubleshooting*

Common Issues:				*m_roslyn-troubleshooting-common*

No response when typing `///`:
• Check `:checkhealth m_roslyn` for configuration issues
• Ensure you're in a C# file with roslyn LSP attached
• Verify roslyn.nvim is properly configured

LSP method not supported error:
• This is expected - the fallback handler provides functionality
• The error indicates the primary LSP method isn't available
• Post-processor should clean up the output automatically

Double documentation appearing:
• Post-processor should clean this up automatically
• Enable debug mode to see processing steps
• Check if multiple handlers are conflicting

Debug Mode:				*m_roslyn-troubleshooting-debug*

Enable debug mode to see detailed notifications:

>lua
	require('m_roslyn.auto_insert_docs').setup({debug = true})
<

Debug messages show:
• Trigger detection and processing steps
• LSP request attempts and responses  
• Post-processor malformed detection and cleanup
• Autocmd lifecycle (creation and removal)

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
